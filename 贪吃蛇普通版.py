# The following codes are auto generated by ChatGPT. It is a snake game. :)
# 以下代码是由ChatGPT自动生成的。实现了一个贪吃蛇小游戏。 
import pygame
import random

# 设置游戏屏幕大小
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480

# 设置游戏速度
SPEED = 15

# 设置贪吃蛇的移动步长和初始位置
STEP = 20
INIT_POSITION = (SCREEN_WIDTH/2, SCREEN_HEIGHT/2)

# 设置颜色
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# 定义方向常量
LEFT = (-1, 0)
RIGHT = (1, 0)
UP = (0, -1)
DOWN = (0, 1)

class Snake:
    def __init__(self):
        self.positions = [INIT_POSITION]
        self.direction = random.choice([LEFT, RIGHT, UP, DOWN])
        self.length = 1

    def get_head_position(self):
        return self.positions[0]

    def turn(self, direction):
        if self.length > 1 and (direction[0]*-1, direction[1]*-1) == self.direction:
            return
        else:
            self.direction = direction

    def move(self):
        cur = self.get_head_position()
        x, y = self.direction
        new = ((cur[0]+(x*STEP)) % SCREEN_WIDTH, (cur[1]+(y*STEP)) % SCREEN_HEIGHT)
        if len(self.positions) > 2 and new in self.positions[2:]:
            raise Exception("撞到自己啦！")
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def reset(self):
        self.positions = [INIT_POSITION]
        self.direction = random.choice([LEFT, RIGHT, UP, DOWN])
        self.length = 1

    def draw(self, surface):
        for p in self.positions:
            r = pygame.Rect((p[0], p[1]), (STEP, STEP))
            pygame.draw.rect(surface, BLUE, r)
            pygame.draw.rect(surface, WHITE, r, 1)

class Food:
    def __init__(self):
        self.position = (0, 0)
        self.color = RED
        self.randomize_position()

    def randomize_position(self):
        self.position = (random.randint(0, SCREEN_WIDTH/STEP-1)*STEP, random.randint(0, SCREEN_HEIGHT/STEP-1)*STEP)

    def draw(self, surface):
        r = pygame.Rect((self.position[0], self.position[1]), (STEP, STEP))
        pygame.draw.rect(surface, self.color, r)
        pygame.draw.rect(surface, WHITE, r, 1)

def draw_scoreboard(surface, score):
    font = pygame.font.Font(None, 36)
    text = font.render("Score: " + str(score), 1, BLACK)
    text_position = text.get_rect(centerx=surface.get_width()/2, top=10)
    surface.blit(text, text_position)

def main():
    pygame.init()

    # 设置游戏窗口标题和大小
    pygame.display.set_caption("贪吃蛇")
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

    # 创建一个 Clock 对象用于控制游戏速度
    clock = pygame.time.Clock()

    # 创建一个贪吃蛇
    snake = Snake()

    # 创建一个食物
    food = Food()

    # 初始化得分
    score = 0

    # 游戏循环
    running = True
    while running:
        # 控制游戏速度
        clock.tick(SPEED)

        # 处理游戏事件
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    snake.turn(LEFT)
                elif event.key == pygame.K_RIGHT:
                    snake.turn(RIGHT)
                elif event.key == pygame.K_UP:
                    snake.turn(UP)
                elif event.key == pygame.K_DOWN:
                    snake.turn(DOWN)

        # 移动贪吃蛇
        try:
            snake.move()
        except Exception as e:
            print(e)
            snake.reset()
            score = 0

        # 判断贪吃蛇是否吃到食物
        if snake.get_head_position() == food.position:
            snake.length += 1
            score += 1
            food.randomize_position()

        # 绘制游戏界面
        screen.fill(WHITE)
        snake.draw(screen)
        food.draw(screen)
        draw_scoreboard(screen, score)
        pygame.display.update()

# 退出游戏
pygame.quit()

if __name__ == "__main__":
    main()